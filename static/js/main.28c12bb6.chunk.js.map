{"version":3,"sources":["components/List.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["List","items","removeItem","editItem","className","map","item","id","title","style","float","type","onClick","Alert","msg","removeAlert","list","useEffect","timeout","setTimeout","clearTimeout","App","useState","name","setName","localStorage","getItem","JSON","parse","setList","isEditing","setIdEditing","editId","setEditId","show","alert","setAlert","setItem","stringify","showAlert","onSubmit","e","preventDefault","newItem","Date","getTime","toString","marginBottom","textAlign","placeholder","onChange","target","value","length","marginTop","filter","find","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOA0BeA,EAtBF,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,SAC9B,OACI,qBAAKC,UAAW,YAAhB,SACKH,EAAMI,KAAI,SAACC,GACR,IAAOC,EAAcD,EAAdC,GAAIC,EAAUF,EAAVE,MACX,OACI,oBAAIJ,UAAU,8BAAd,SACI,qBAAIA,UAAU,qEAAd,UACKI,EACD,sBAAKC,MAAO,CAACC,MAAO,SAApB,UACI,wBAAQC,KAAK,SAASP,UAAU,WAAWQ,QAAS,kBAAKT,EAASI,IAAlE,SAAuE,cAAC,IAAD,MACvE,wBAAQI,KAAK,SAASP,UAAU,aAAaQ,QAAS,kBAAIV,EAAWK,IAArE,SAA0E,cAAC,IAAD,aALrCA,SCEtDM,EAVD,SAAC,GAAoC,IAAnCF,EAAkC,EAAlCA,KAAMG,EAA4B,EAA5BA,IAAKC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,KAOpC,OANAC,qBAAU,WACN,IAAMC,EAASC,YAAW,WACtBJ,MACF,KACF,OAAM,kBAAMK,aAAaF,MAC1B,CAACF,IACG,mBAAGZ,UAAS,sBAAiBO,GAA7B,SAAsCG,KCiFlCO,EA5EH,WACV,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBF,mBAXbG,aAAaC,QAAQ,QAEfC,KAAKC,MAAMH,aAAaC,QAAQ,SAExC,IAOT,mBAAOV,EAAP,KAAaa,EAAb,KACA,EAAkCP,oBAAS,GAA3C,mBAAOQ,EAAP,KAAkBC,EAAlB,KACA,EAA4BT,mBAAS,MAArC,mBAAOU,EAAP,KAAeC,EAAf,KACA,EAA0BX,mBAAS,CAACY,MAAK,EAAOpB,IAAI,GAAIH,KAAK,KAA7D,mBAAOwB,EAAP,KAAcC,EAAd,KAEAnB,qBAAU,WACRQ,aAAaY,QAAQ,OAAQV,KAAKW,UAAUtB,MAC5C,CAACA,IAGH,IAwBMuB,EAAY,WAAwC,IAAvCL,EAAsC,wDAAxBvB,EAAwB,uDAAjB,GAAIG,EAAa,uDAAP,GAChDsB,EAAS,CAACF,OAAMvB,OAAMG,SAiBxB,OACE,0BAASV,UAAU,iBAAnB,UACE,uBAAMoC,SA5CW,SAACC,GAElB,GADFA,EAAEC,iBACInB,EAEE,GAAGA,GAAQO,EACfD,EACEb,EAAKX,KAAI,SAACC,GACR,OAAGA,EAAKC,KAAOyB,EACN,2BAAI1B,GAAX,IAAiBE,MAAMe,IAElBjB,MAGXkB,EAAQ,IACRS,EAAU,MACVF,GAAa,GACbQ,GAAU,EAAM,UAAW,qBACtB,CACLA,GAAU,EAAM,UAAW,6BAC3B,IAAMI,EAAU,CAACpC,IAAI,IAAIqC,MAAOC,UAAUC,WAAYtC,MAAMe,GAC5DM,EAAQ,GAAD,mBAAKb,GAAL,CAAW2B,KAClBnB,EAAQ,SAlBRe,GAAU,EAAM,SAAU,uBAyC5B,UACGJ,EAAMD,MAAQ,cAAC,EAAD,2BAAWC,GAAX,IAAkBpB,YAAawB,EAAWvB,KAAMA,KAC/D,oBAAIP,MAAO,CAACsC,aAAc,SAAUC,UAAW,UAA/C,qCACA,sBAAK5C,UAAU,YAAf,UACE,uBAAOO,KAAK,OAAOP,UAAU,eAAe6C,YAAY,yBAAyBC,SAAU,SAACT,GAAD,OAAMjB,EAAQiB,EAAEU,OAAOC,QAAQA,MAAO7B,IACjI,wBAAQZ,KAAK,SAASP,UAAU,kBAAhC,SAAmD0B,EAAY,OAAS,iBAG3Ed,EAAKqC,OAAS,GACb,sBAAK5C,MAAO,CAAE6C,UAAW,QAAzB,UACE,cAAC,EAAD,CAAMrD,MAAOe,EAAMd,WA3BR,SAACK,GAClBgC,GAAU,EAAM,SAAU,gBAC1BV,EAAQb,EAAKuC,QAAO,SAACjD,GAAD,OAAUA,EAAKC,KAAOA,OAyBOJ,SAvBlC,SAACI,GAChB,IAAMJ,EAAWa,EAAKwC,MAAK,SAAClD,GAAD,OAAUA,EAAKC,KAAOA,KACjDwB,GAAa,GACbE,EAAU1B,GACViB,EAAQrB,EAASK,UAoBX,qBAAKJ,UAAU,cAAf,SACE,wBAAQA,UAAU,kBAAkBQ,QAnB5B,WAChB2B,GAAU,EAAM,SAAU,cAC1BV,EAAQ,KAiBA,kCCtEG4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.28c12bb6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { findAllInRenderedTree } from 'react-dom/cjs/react-dom-test-utils.production.min';\r\nimport {FaEdit, FaTrash} from \"react-icons/fa\";\r\n\r\nconst List = ({items, removeItem, editItem}) => {\r\n    return (\r\n        <div className= \"container\">\r\n            {items.map((item) => {\r\n                const{ id, title } = item;\r\n                return (\r\n                    <ul className=\"list-group list-group-flush\" key={id}>\r\n                        <li className=\"list-group-items d-flex justify-content-between align-items-center\">\r\n                            {title}\r\n                            <div style={{float: \"right\" }}>\r\n                                <button type=\"button\" className=\"edit-btn\" onClick={()=> editItem(id)}><FaEdit /></button>\r\n                                <button type=\"button\" className=\"delete-btn\" onClick={()=>removeItem(id)}><FaTrash /></button>\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                )\r\n            })}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List\r\n","import React, {useEffect} from 'react';\r\n\r\nconst Alert = ({type, msg, removeAlert, list}) => {\r\n    useEffect(() => {\r\n        const timeout= setTimeout(() => {\r\n            removeAlert();\r\n        },3000);\r\n        return() => clearTimeout(timeout);\r\n    }, [list]);\r\n    return <p className={`alert alert-${type}`}>{msg}</p>;\r\n};\r\n\r\nexport default Alert;\r\n","import React, {useState, useEffect} from \"react\";\nimport List from \"./components/List\";\nimport Alert from \"./components/Alert\";\n\nconst getLocalStorage = () => {\n  let list = localStorage.getItem(\"list\");\n  if(list) {\n    return (list = JSON.parse(localStorage.getItem(\"list\")));\n  } else {\n    return [];\n  }\n};\n\n\nconst App = () =>{\n  const [name, setName] = useState(\"\");\n  const [list, setList] = useState(getLocalStorage());\n  const [isEditing, setIdEditing] = useState(false);\n  const [editId, setEditId] = useState(null);\n  const [alert, setAlert] = useState({show:false, msg:\"\", type:\"\"});\n\n  useEffect(() => {\n    localStorage.setItem(\"list\", JSON.stringify(list));\n  },[list]);\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n      if(!name) {\n        showAlert(true, \"danger\", \"Please enter value\");\n      }else if(name && isEditing){\n        setList(\n          list.map((item)=> {\n            if(item.id === editId){\n              return {...item, title:name}\n            }\n            return item\n          })\n        );\n        setName(\"\");\n        setEditId(null);\n        setIdEditing(false);\n        showAlert(true, \"success\", \"Value Changes\");\n      } else {\n        showAlert(true, \"success\", \"Items added to the list. \");\n        const newItem = {id: new Date().getTime().toString(), title:name};\n        setList([...list, newItem]);\n        setName(\"\");\n      }\n  };\n  const showAlert = (show = false, type = \"\", msg = \"\") => {\n    setAlert({show, type, msg});\n  };\n  const removeItem = (id) => {\n    showAlert(true, \"danger\", \"Item Removed\");\n    setList(list.filter((item) => item.id !== id));\n  };\n  const editItem = (id) => {\n    const editItem = list.find((item) => item.id === id);\n    setIdEditing(true);\n    setEditId(id);\n    setName(editItem.title);\n  };\n  const clearList = () => {\n    showAlert(true, \"danger\", \"Empty List\");\n    setList([]);\n  };\n\n  return(\n    <section className=\"section-center\">\n      <form onSubmit={handleSubmit}>\n        {alert.show && <Alert {...alert} removeAlert={showAlert} list={list} />}\n        <h3 style={{marginBottom: \"1.5rem\", textAlign: \"center\"}}>Locally Stored Todo App</h3>\n        <div className=\"mb-3 form\">\n          <input type=\"text\" className=\"form-control\" placeholder=\"Enter the items to add\" onChange={(e)=> setName(e.target.value)} value={name} />\n          <button type=\"submit\" className=\"btn btn-success\">{isEditing ? \"Edit\" : \"Submit\"}</button>\n        </div>\n      </form>\n      {list.length > 0 && (\n        <div style={{ marginTop: \"2rem\"}}>\n          <List items={list} removeItem={removeItem} editItem={editItem} />\n          <div className=\"text-center\">\n            <button className=\"btn btn-warning\" onClick={clearList}>Clear Items</button>\n          </div>\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}